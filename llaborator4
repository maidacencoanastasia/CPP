#include <iostream>
#include <time.h>
#include <cstdlib>
#include <conio.h>
#include <stdio.h>
#include <iomanip>
#include <locale>
#include <cmath>
#include <ctime>

using namespace  std;
float** Create(int row, int col)
{
    float** Arr = new float*[row];
    for (int i = 0; i < row; i++)
    {
        Arr[i] = new float[col];
    }
    return Arr;
}

void Fill(float** Arr, int row, int col)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            Arr[i][j] = 130 + rand() %(220-100);
        }
    }
}

void Print(float** Arr, int row, int col)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            cout << Arr[i][j] << "\t";
        }
        cout << "\n";
    }
}

void FillOne(float* element, int size)
{
    for (int i = 0; i < size; i++)
    {
        element[i] = 130 + rand() %(220-100);
    }
}

void FillOneMedColumn(float **M, float *Sum, int n, int m)
{
    for (int j = 0; j < m; ++j)
    {
        Sum[j] = 0;
        for (int i = 0; i < n; ++i)
        {
            Sum[j] = (Sum[j] + M[i][j]);
        }
        Sum[j] = Sum[j] / n;
    }
}
float FillOneMedRow(float **M, float *Med, int n, int m)
{
    for (int i = 0; i < n; ++i)
    {
        Med[i] = 0;
        for (int j = 0; j < m; ++j)
        {
            Med[i] = (Med[i] + M[i][j]);
        }
        Med[i] = Med[i] / m;
    }
    return *Med;
}
void PrintOne(float* element, int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << element[i] << "\t";
    }
    cout << "\t";
}

void AddRow(float**&Arr, int &row, int col, int position, float* element)
{
    float** tmpArr = new float*[row + 1];
    for (int i = 0, j = 0; i < row + 1; i++)
    {
        if (i == position)
        {
            tmpArr[i] = element;
        }
        else
        {
            tmpArr[i] = Arr[j];
            j++;
        }
    }
    delete[] Arr;
    row++;
    Arr = tmpArr;
}
float **ADDCOL(float **mas,int n,int &m,float *Med)
{
    float **t = new float*[n];
    for(int i = 0; i < n; i++)
        t[i] = new float[m+1];
    for(int i = 0; i < n; i++)
    {
        for(int j=0; j < m; j++)
        {
            t[i][j] = mas[i][j];
        }
        t[i][m] = Med[i];
    }
    m++;
    return t;

}
void Remove(float** Arr, int row)
{
    for (int i = 0; i < row; i++)
    {
        delete[] Arr[i];
    }
    delete[] Arr;
}
void sort(float **p, int iCol, int iBegin, int iEnd)
{
    int i = iBegin, j = iEnd;
    float iAvg = p[(iBegin + iEnd) / 2][iCol];

    do
    {
        while (p[i][iCol] < iAvg) i++;
        while (iAvg < p[j][iCol]) j--;

        if (p[i][iCol] > p[j][iCol])
        {
            float t = p[i][iCol];
            p[i][iCol] = p[j][iCol];
            p[j][iCol] = t;
        }

        i++;
        j--;
    }
    while (i < j);

    if (i == j)
    {
        i++;
        j--;
    }

    if (iBegin < j)
        sort(p, iCol, iBegin, j);

    if (i < iEnd)
        sort(p, iCol, i, iEnd);

}
void sortrow(float **p, int n, int m)
{
    float temp=0;
    for(int c=0; c<=(n*m); c++) //колличество проходов
    {
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m-1; j++)
            {
                if(p[i][j]>p[i][j+1])
                {
                    temp=p[i][j];
                    p[i][j]=p[i][j+1];
                    p[i][j+1]=temp;
                }
            }

        }
    }
}



void MinMax(float **M, int n, int m)
{
    float max = M[0][0];
    float min = max;
    int str, stl, mstr, mstl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (M[i][j] > max)
            {
                max = M[i][j];
                str = i + 1;
                stl = j + 1;
            }
            if (M[i][j] < min)
            {
                min = M[i][j];
                mstr = i + 1;
                mstl = j + 1;
            }
        }
    }
    std::cout << min << " - minimum ;Pozition " << mstr << ":" << mstl << std::endl;
    std::cout << max << " - maximum ;Pozition " << str << ":" << stl << std::endl;
}
void Permutari(float **M, size_t n, size_t m, int k, int l)
{
    float *t = M[k];
    M[k] = M[l];
    M[l] = t;

}

int main()
{
    setlocale(LC_ALL, "Rus");
    int row ;
    int col ;
    int poz, l1, l2;
    cout << "Введите количество строк матрицы: ";
    cin >> row;
    cout << "Введите количество столбцов матрицы: ";
    cin >> col;
    float** Array = Create(row, col);
    Fill(Array, row, col);
    cout << "Массив ИЗНАЧАЛЬНЫЙ - "<< endl;
    Print(Array, row, col);
    cout << endl;

    float* element = new float[col];
    FillOneMedColumn(Array, element, row, col);
    cout << "Строка для добавления - "<< endl;
    PrintOne(element, col);

    cout << endl << endl;
    cout << "Введите позицию для вставки строки - ";
    cin>>poz;
    AddRow(Array, row, col, poz-1, element);
    Print(Array, row, col);
    cout << endl;
    cout << "\nКолонка для добавления - "<< endl;
    float* element_row = new float[col];
    FillOneMedRow(Array, element_row, row, col);
    PrintOne(element_row, col);
    cout << "\n\nВставка столбца - "<< endl;
    Array=ADDCOL(Array,row,col,element_row);
    Print(Array, row, col);
    cout << endl;

    MinMax(Array,row, col);

    cout << "\nIntroduceti linii pentru schimbarea - ";
    cin >> l1 >> l2;
    Permutari(Array,row,col, --l1, --l2);
    Print(Array, row, col);
    for (int i = 0; i < row; i++)
        sort(Array, i, 0, col - 1);
    cout << "Массив отсортированный по возрастанию columns - "<< endl;
    Print(Array, row, col);
    cout << "Массив отсортированный по возрастанию rows - "<< endl;
    sortrow(Array,row, col);
    Print(Array, row, col);

    //Remove(Array, row);
    return 0;
}
